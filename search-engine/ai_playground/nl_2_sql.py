import os
import re
import pandas as pd
import gradio as gr
import psycopg2

from langchain.schema.messages import BaseMessage
from typing import List
from openai import OpenAI
from dotenv import load_dotenv
from tenacity import wait_fixed, stop_after_attempt, retry
from .template import sql_template, refiner_template


load_dotenv()


@retry(wait=wait_fixed(2), stop=stop_after_attempt(5))
def get_completion(l_message: List[BaseMessage], model_name='gpt-3.5-turbo-0125'):
    """
    Get completion based on the specified model name and list of messages.

    Args:
        model_name (str): The name of the model to use for completion.
        l_message (List[BaseMessage]): The list of messages to use as input.

    Returns:
        str: The completion generated by the model.

    Raises:
        OpenAIException: If the specified model name is not supported.
    """
    
    l_new_message = []
    
    for message in l_message:
        if message.type == 'system':
            l_new_message.append({
                'role': 'system',
                'content': message.content
            })
        
        elif message.type == 'human':
            l_new_message.append({
                'role': 'user',
                'content': message.content
            })
        
        else:
            l_new_message.append({
                'role': 'assistant',
                'content': message.content
            })
    
    client = OpenAI(
        api_key=os.environ['OPENAI_API_KEY']
    )

    chat_completion = client.chat.completions.create(
        model=model_name,
        messages=l_new_message
    )

    return chat_completion.choices[0].message.content


def get_sql_from_string(input_string: str):
    sql_pattern = r'```sql(.*?)```'
    l_sql = []

    for match in re.finditer(sql_pattern, input_string, re.DOTALL):
        l_sql.append(match.group(1).strip())

    if l_sql:
        return l_sql[-1]
    else:
        raise ValueError('No SQL found in the input string')


def fetch_result(user_query: str, additional_instruction: str):
    def run_sql(sql_query: str):
        with psycopg2.connect(
            host="localhost",
            user="amili_datalake",
            password="Amili#123",
            database='datalake'
        ) as conn:
            with conn.cursor() as cur:
                cur.execute(sql_query)
                rows = cur.fetchmany(20)

        return rows

    l_message = sql_template.format_messages(
        query=user_query,
        special_instruction=additional_instruction
    )

    raw_result = get_completion(l_message, 'gpt-4-turbo-preview')
    sql_query = get_sql_from_string(raw_result)

    print("Initial SQL statement: ", sql_query)

    n_try = 0
    while True:
        if n_try >= 5:
            break

        try:
            result = run_sql(sql_query)
            print("Final result: ", result)

            l_report_patient_id = []
            l_report_age = []
            l_report_gender = []
            l_report_bmi = []
            l_report_race = []
            for ele in result:    
                l_report_patient_id.append(ele[0])
                l_report_age.append(ele[1])
                l_report_gender.append(ele[2])
                l_report_bmi.append(ele[3])
                l_report_race.append(ele[4])

            df = pd.DataFrame({
                'patient_id': l_report_patient_id,
                'age': l_report_age,
                'gender': l_report_gender,
                'bmi': l_report_bmi,
                'race': l_report_race
            })

            return sql_query, df

        except Exception as e:
            try:
                l_message = refiner_template.format_messages(
                    query=user_query,
                    sql=sql_query,
                    sql_error=str(e),
                    special_instruction=additional_instruction
                )

                raw_result = get_completion(l_message, 'gpt-4-turbo-preview')
                sql_query = get_sql_from_string(raw_result)

                print("SQL Error execution: ", str(e))
                print("Refined SQL statement: ", sql_query)

            except Exception as e:
                pass
        
        n_try += 1

    return None, None


def ui():
    with gr.Blocks() as demo:
        gr.Markdown(
            """
        # SQL Generation Tools
        Start to write the query you want to generate SQL
        """
        )

        txtbox_user_query = gr.Textbox(label="User Query", value="Get all the patients with bmi > 20 and should be female. The patient should be Chinese and Vietnamese")
        
        txtbox_addition_instruction = gr.Textbox(label="Additional Instruction", value="""【IMPORTANT INSTRUCTION】
Please pay attention to some terms in the 【Question】, and make sure you understand the meaning of the terms:
- Elderly patient meant the patient age > 60.
- Young patient meant the patient age < 30.
- Asian meant the patient come from Chinese and Vietnamese.

""")

        btn_fetch_result = gr.Button("Fetching the result")

        txtbox_sql_generated = gr.Textbox(label="SQL Generated", interactive=False, info="The generated SQL goes here")

        sql_result = gr.DataFrame(label="Final Result")

        btn_fetch_result.click(fetch_result, inputs=[txtbox_user_query, txtbox_addition_instruction], outputs=[txtbox_sql_generated, sql_result])
